<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>How To on Magic Modules</title><link>https://googlecloudplatform.github.io/magic-modules/docs/how-to/</link><description>Recent content in How To on Magic Modules</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://googlecloudplatform.github.io/magic-modules/docs/how-to/index.xml" rel="self" type="application/rss+xml"/><item><title>Identify MMv1 vs handwritten content</title><link>https://googlecloudplatform.github.io/magic-modules/docs/how-to/identify-mmv1-vs-handwritten/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://googlecloudplatform.github.io/magic-modules/docs/how-to/identify-mmv1-vs-handwritten/</guid><description>Identify MMv1 vs handwritten content # MMv1 # MMv1 is a Ruby-based code generator that implements Terraform Provider Google (TPG) resources from YAML specification files.
MMv1-generated resources like google_compute_address can be identified by looking in their Go source for an AUTO GENERATED CODE header as well as a Type MMv1. MMv1-generated resources should have source code present under their product folders, like mmv1/products/compute for the google_compute_address resource.
Handwritten # Handwritten resources like google_container_cluster can be identified if they have source code present under the mmv1/third_party/terraform/resources folder or by the absence of the AUTO GENERATED CODE header in their Go source in the downstream repositories.</description></item><item><title>Add an MMv1 resource</title><link>https://googlecloudplatform.github.io/magic-modules/docs/how-to/add-mmv1-resource/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://googlecloudplatform.github.io/magic-modules/docs/how-to/add-mmv1-resource/</guid><description>Add an MMv1 resource # Generated resources are created using the mmv1 code generator, and are configured by editing definition files under the mmv1/products path. Go to the service for your resource like compute and open the api.yaml and terraform.yaml files. In each of those, find the resource&amp;rsquo;s properties field.
For example, for google_spanner_database:
api.yaml
terraform.yaml
In short,properties is an array of the resource&amp;rsquo;s fields. api.yaml it contains the fields of the resource based on how it behaves in the API, and terraform.</description></item><item><title>Add MMv1 IAM resources</title><link>https://googlecloudplatform.github.io/magic-modules/docs/how-to/add-mmv1-iam/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://googlecloudplatform.github.io/magic-modules/docs/how-to/add-mmv1-iam/</guid><description>Add MMv1 IAM resources # For resources implemented through the MMv1 engine, the majority of configuration for IAM support can be inferred based on the preexisting YAML specification file.
To add support for IAM resources based on an existing resource, add an iam_policy block to the resource&amp;rsquo;s definition in api.yaml, such as the following:
iam_policy: !ruby/object:Api::Resource::IamPolicy method_name_separator: &amp;#39;:&amp;#39; fetch_iam_policy_verb: :POST parent_resource_attribute: &amp;#39;registry&amp;#39; import_format: [&amp;#34;projects/{{project}}/locations/{{location}}/registries/{{name}}&amp;#34;, &amp;#34;{{name}}&amp;#34;] The specification values can be determined based on a mixture of the resource specification and the cloud.</description></item><item><title>Add an MMv1 test</title><link>https://googlecloudplatform.github.io/magic-modules/docs/how-to/add-mmv1-test/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://googlecloudplatform.github.io/magic-modules/docs/how-to/add-mmv1-test/</guid><description>Add an MMv1 test # For generated resources, you can add an example to the mmv1/templates/terraform/examples directory, which contains a set of templated Terraform configurations.
After writing out the example and filling out some metadata, Magic Modules will insert it into the resource documentation page, and generate a test case stepping through the following stages:
Run terraform apply on the configuration, waiting for it to succeed and recording the results in Terraform state Run terraform plan, and fail if Terraform detects any drift Clear the resource from state and run terraform import on it Deeply compare the original state from terraform apply and the terraform import results, returning an error if any values are not identical Destroy all resources in the configuration using terraform destroy, waiting for the destroy command to succeed Call GET on the resource, and fail the test if it is still present Example Configuration File # First, you&amp;rsquo;ll want to add the example file.</description></item><item><title>Update a handwritten resource</title><link>https://googlecloudplatform.github.io/magic-modules/docs/how-to/update-handwritten-resource/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://googlecloudplatform.github.io/magic-modules/docs/how-to/update-handwritten-resource/</guid><description>Update a handwritten resource # The Google providers for Terraform have a large number of handwritten go files, primarily for resources written before Magic Modules was used with them. Most handwritten files are expected to stay handwritten indefinitely, although conversion to a generator may be possible for a limited subset of them.
We no longer accept new handwritten resources except in rare cases. However, understanding how to edit and add to existing resources may be important for implementing new fields or changing existing behavior.</description></item><item><title>Add a handwritten test</title><link>https://googlecloudplatform.github.io/magic-modules/docs/how-to/add-handwritten-test/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://googlecloudplatform.github.io/magic-modules/docs/how-to/add-handwritten-test/</guid><description>Add a handwritten test # For handwritten resources and generated resources that need to test update, handwritten tests must be added.
Tests are made up of a templated Terraform configuration where unique values like GCE names are passed in as arguments, and boilerplate to exercise that configuration.
The test boilerplate effectively does the following:
Run terraform apply on the configuration, waiting for it to succeed and recording the results in Terraform state Run terraform plan, and fail if Terraform detects any drift Clear the resource from state and run terraform import on it Deeply compare the original state from terraform apply and the terraform import results, returning an error if any values are not identical Destroy all resources in the configuration using terraform destroy, waiting for the destroy command to succeed Call GET on the resource, and fail the test if it is still present Simple Tests # Terraform configurations are stored as string constants wrapped in Go functions like the following:</description></item><item><title>Add a handwritten datasource</title><link>https://googlecloudplatform.github.io/magic-modules/docs/how-to/add-handwritten-datasource/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://googlecloudplatform.github.io/magic-modules/docs/how-to/add-handwritten-datasource/</guid><description>Add a handwritten datasource # Note : only handwritten datasources are currently supported
Datasources are like terraform resources except they don&amp;rsquo;t create anything. They are simply read-only operations that will expose some sort of values needed for subsequent resource operations. If you&amp;rsquo;re adding a field to an existing datasource, check the Resource section. Everything there will be mostly consistent with the type of change you&amp;rsquo;ll need to make. For adding a new datasource there are 5 steps to doing so.</description></item><item><title>Add handwritten IAM resources</title><link>https://googlecloudplatform.github.io/magic-modules/docs/how-to/add-handwritten-iam/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://googlecloudplatform.github.io/magic-modules/docs/how-to/add-handwritten-iam/</guid><description>Add handwritten IAM resources # Handwritten IAM support is only recommended for resources that cannot be managed using MMv1, including for handwritten resources, due to the need to manage tests and documentation by hand. This guidance goes through the motions of adding support for new handwritten IAM resources, but does not go into the details of the implementation as any new handwritten IAM resources are expected to be exceptional.</description></item></channel></rss>